openapi: 3.0.0
info:
  title: SafeKids API
  description: API for the SafeKids application, including safety, SOS, emergency, path, and helper services.
  version: 1.0.0
externalDocs:
  description: Find out more about SafeKids
  url: https://your-safe-kids-website.com
servers:
  - url: https://your-safe-kids-api.com/api/v1

tags:
  - name: user management
    description: 사용자 계정 관련 작업
  - name: app settings
    description: 앱 기본 구조
  - name: support
    description: 도움말
  - name: permissions
    description: 권한설정
  - name: safety
    description: Integrated safety information services.
  - name: sos
    description: SOS request and management services.
  - name: emergency
    description: Emergency situation handling services.
  - name: paths
    description: Path setting and deviation services.
  - name: helper
    description: Helper-related operations and services.

paths:

  /users/signup/email:
    post:
      tags:
        - user management
      summary: 일반 회원 회원가입
      operationId: 일반회원 회원가입
      parameters:
        - name: name
          in: query
          description: 이름
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: 패스워드
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: 이메일
          required: true
          schema:
            type: string
        - name: phone
          in: query
          description: 전화번호
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 성공적으로 처리되었습니다.
        '400':
          description: 잘못된 요청입니다.
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /users/verify/phone:
    post:
      tags:
        - user management
      summary: 휴대폰 인증 요청 및 확인
      operationId: 휴대폰_인증_요청_및_확인
      parameters:
        - name: phone
          in: query
          description: 전화번호
          required: true
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/verify/phone-confirm:
    post:
      tags:
        - user management
      summary: 휴대폰 인증 번호 확인
      operationId: 휴대폰_인증_번호_확인
      parameters:
        - name: confirmNumber
          in: query
          description: 전화번호 인증번호
          required: true
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/verify/email:
    post:
      tags:
        - user management
      summary: 이메일 중복 확인
      operationId: 이메일 중복 확인
      parameters:
        - name: email
          in: query
          description: 이메일
          required: true
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/verify/social/phone:
    post:
      tags:
        - user management
      summary: 소셜 가입 시 기존 가입자 휴대폰 확인
      operationId: 휴대폰 중복 확인
      parameters:
        - name: phone
          in: query
          description: phone
          required: true
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/signup/social/{provider}:
    post:
      tags:
        - user management
      summary: 소셜 회원가입 처리
      operationId: 소셜_회원가입_처리
      parameters:
        - name: provider
          in: path
          description: 제공 소셜
          required: true
          schema:
            type: string
        - name: providerId
          in: query
          description: 소셜고유Id
          required: true
          schema:
            type: string
        - name: userId
          in: query
          description: 유저Id
          required: true
          schema:
            type: integer
            format: int64
        - name: phone
          in: query
          description: 전화번호
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: 이름
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /user/role-setting/{userId}:
    post:
      tags:
        - user management
      summary: 역할 설정
      operationId: 역할 설정
      parameters:
        - name: userId
          in: path
          description: 유저Id
          type: integer
          required: true
        - name: role
          in: query
          description: 역할
          type: string
      responses:
        '200': { description: 설정이 성공적으로 저장되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '500': { description: 서버 오류 }

  /users/login/email:
    post:
      tags:
        - users management
      summary: 일반 이메일 로그인
      operationId: 일반_이메일_로그인
      parameters:
        - name: email
          in: query
          description: 이메일
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: 패스워드
          required: true
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/login/social:
    post:
      tags:
        - user management
      summary: 소셜 로그인 처리
      operationId: loginWithSocial
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                  enum: [ kakao, google, naver ]
                  description: 소셜 로그인 제공자
                accessToken:
                  type: string
                  description: 소셜 액세스 토큰
              required:
                - provider
                - accessToken
      responses:
        '200':
          description: 성공적으로 로그인 처리됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/find-id:
    post:
      tags:
        - user management
      summary: 아이디 찾기
      operationId: 아이디_찾기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 사용자 이름
                phone:
                  type: string
                  description: 인증된 전화번호
              required:
                - name
                - phone
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/reset-password/request:
    post:
      tags:
        - user management
      summary: 비밀번호 재설정 요청
      operationId: 비밀번호_재설정_요청
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 이메일 주소
                phone:
                  type: string
                  description: 인증된 전화번호
              required:
                - email
                - phone
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/reset-password/confirm:
    post:
      tags:
        - user management
      summary: 비밀번호 재설정 완료
      operationId: 비밀번호_재설정_완료
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                newPassword:
                  type: string
                confirmPassword:
                  type: string
              required:
                - email
                - newPassword
                - confirmPassword
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}:
    delete:
      tags:
        - user management
      summary: 회원 탈퇴 처리
      operationId: 회원_탈퇴_처리
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/logout:
    post:
      tags:
        - user management
      summary: 로그아웃
      operationId: 로그아웃
      parameters:
        - name: userId
          in: path
          description: 유저Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}/profile:
    put:
      tags:
        - user management
      summary: 회원정보 수정
      operationId: 회원정보_수정
      parameters:
        - name: userId
          in: path
          description: 유저 ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                nickname:
                  type: string
                profileImage:
                  type: string
              required:
                - name
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/verify/nickname:
    post:
      tags:
        - user management
      summary: 닉네임 중복 확인
      operationId: 닉네임 중복 확인
      parameters:
        - name: nickname
          in: path
          description: 닉네임
          required: true
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }


  /users/{userId}/residences:
    post:
      tags:
        - user management
      summary: 주거지 등록
      operationId: 주거지_등록
      parameters:
        - name: userId
          in: path
          description: 유저 ID
          required: true
          schema:
            type: integer
        - name: address
          in: query
          description: 주소
          required: true
          schema:
            type: string
        - name: residenceName
          in: query
          description: 주거단지 이름
          required: true
          schema:
            type: string
        - name: latitude
          in: query
          description: 위도
          required: true
          schema:
            type: number
        - name: longitude
          in: query
          description: 경도
          required: true
          schema:
            type: number
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{parentId}/wards:
    post:
      tags:
        - user management
      summary: 피보호자 등록 및 연동
      operationId: 피보호자_등록_및_연동
      parameters:
        - name: parentId
          in: path
          description: 보호자 ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                childId:
                  type: integer
                  description: 아동Id
                childName:
                  type: string
                  description: 아동 이름
                childProfileImage:
                  type: string
                  description: 아동 프로필 이미지
              required:
                - childId
                - childName
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{childId}/modify:
    post:
      tags:
        - user management
      summary: 아동 상세 정보 변경
      operationId: 아동 상세 정보 변경
      parameters:
        - name: childId
          in: path
          description: 아동 ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                childName:
                  type: string
                  description: 아동 이름
                gender:
                  type: string
                  enum: [남자,여자]
                  description: 성별
                birthYear:
                  type: integer
                  format: int64
                  description: 태어난 연도
                height:
                  type: integer
                  format: int64
                  description: 아동 키
                childProfileImage:
                  type: string
                  description: 아동 프로필 이미지
                childPhotoUrl:
                  type: array
                  items:
                    type: string
                    description: 아이 사진 url
              required:
                - childId
                - childName
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}/link-code:
    post:
      tags:
        - user management
      summary: 보호자-피보호자 연동 코드 생성
      operationId: 연동_코드_생성
      parameters:
        - name: userId
          in: path
          description: 아동Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}/linked-children:
    get:
      tags:
        - user management
      summary: 연동된 피보호자 조회
      operationId: 연동_피보호자_조회
      parameters:
        - name: userId
          in: path
          description: 유저Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}/linked-parents:
    get:
      tags:
        - user management
      summary: 연동된 보호자 조회
      operationId: 연동_보호자_조회
      parameters:
        - name: userId
          in: path
          description: 유저Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{code}/linked_child:
    get:
      tags:
        - user management
      summary: 랜덤코드-피보호자 조회
      operationId: 랜덤코드-피보호자 조회
      parameters:
        - name: code
          in: path
          description: 피보호자 생성 코드
          required: true
          schema:
            type: string
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /settings/notifications:
    put:
      tags:
        - app settings
      summary: 알림 수신 여부 설정
      operationId: updateNotificationSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                push:
                  type: boolean
                offRoute:
                  type: boolean
                traffic:
                  type: boolean
                constructor:
                  type: boolean
              required:
                - push
                - offRoute
                - traffic
                - constructor
      responses:
        '200': { description: 설정이 성공적으로 저장되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '500': { description: 서버 오류 }



  /permissions/request:
    post:
      tags:
        - permissions
      summary: 디바이스 권한 요청 처리
      operationId: requestPermissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: boolean
                camera:
                  type: boolean
                microphone:
                  type: boolean
                gallery:
                  type: boolean
              required:
                - location
      responses:
        '200': { description: 권한 요청 결과 저장됨 }
        '400': { description: 잘못된 요청입니다. }
        '500': { description: 서버 오류 }

  /support/faq:
    get:
      tags:
        - support
      summary: 자주 묻는 질문(FAQ) 목록 조회
      operationId: getFAQ
      responses:
        '200':
          description: FAQ 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                    answer:
                      type: string
        '500': { description: 서버 오류 }

  /support/notices:
    get:
      tags:
        - support
      summary: 공지사항 목록 조회
      operationId: getNotices
      responses:
        '200':
          description: 공지사항 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    content:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
        '500': { description: 서버 오류 }


  # 3. 안전 서비스 (Safety Service)
  /safety/cctv/realtime:
    get:
      tags:
        - safety
      summary: Get real-time CCTV locations and feeds.
      description: Provides real-time CCTV locations and feeds near the child's current path.
      operationId: getRealtimeCCTV
      parameters:
        - name: childId
          in: query
          description: The ID of the child to get CCTV information for.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of CCTV locations and feeds.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CCTVInfo'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /safety/cctv/private:
    get:
      tags:
        - safety
      summary: Get feeds from consented private CCTVs.
      description: Provides feeds from private CCTVs that have been consented to.
      operationId: getPrivateCCTV
      parameters:
        - name: childId
          in: query
          description: The ID of the child to get CCTV information for.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of private CCTV feeds.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CCTVInfo'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /safety/traffic-info:
    get:
      tags:
        - safety
      summary: Get traffic safety information.
      description: Provides traffic safety information.
      operationId: getTrafficInfo
      responses:
        '200':
          description: Traffic safety information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficInfo'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /safety/child-map/construction:
    get:
      tags:
        - safety
      summary: Get construction status from the Ministry of the Interior and Safety's child safety map.
      description: Provides information on construction sites from the government's child safety map.
      operationId: getChildMapConstruction
      responses:
        '200':
          description: Construction status information.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConstructionInfo'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /safety/device/{childId}/location:
    get:
      tags:
        - safety
      summary: Get real-time location from a child's mobile device.
      description: Provides the real-time location of the child via their mobile device.
      operationId: getChildDeviceLocation
      parameters:
        - name: childId
          in: path
          description: The ID of the child.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Real-time location data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: Child not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /safety/device/{childId}/status:
    get:
      tags:
        - safety
      summary: Get real-time device status.
      description: Provides real-time status of the child's mobile device (e.g., battery, network).
      operationId: getChildDeviceStatus
      parameters:
        - name: childId
          in: path
          description: The ID of the child.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Device status data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceStatus'
        '404':
          description: Child not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /safety/residence/{residenceId}/cctv:
    get:
      tags:
        - safety
      summary: Get CCTV feeds for a residential complex.
      description: Provides CCTV feeds for a residential complex if a child's home is set there.
      operationId: getResidenceCCTV
      parameters:
        - name: residenceId
          in: path
          description: The ID of the residential complex.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Residential complex CCTV feeds.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CCTVInfo'
        '404':
          description: Residence not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # SOS
  /sos/{childId}/request:
    post:
      tags:
        - sos
      summary: 아동의 SOS 요청 시
      description: The child presses the SOS button, and an alert is sent to guardians after 5 seconds.
      operationId: requestSosByChild
      parameters:
        - name: childId
          in: path
          description: The ID of the child requesting help.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: SOS request successfully initiated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SosRequestResponse'
        '400':
          description: Invalid child ID or other request errors.
        '404':
          description: Child not found.
        default:
          description: Unexpected error.

  /sos/{parentId}/cancel:
    post:
      tags:
        - sos
      summary: 보호자의 SOS요청 취소
      description: A guardian cancels an active SOS request.
      operationId: cancelSosByGuardian
      parameters:
        - name: parentId
          in: path
          description: The ID of the guardian who is canceling the request.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The SOS request ID to be canceled.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sosRequestId:
                  type: integer
                  format: int64
                  description: The ID of the SOS request to be canceled.
      responses:
        '200':
          description: SOS request successfully canceled.
        '400':
          description: Invalid guardian ID or request ID.
        '404':
          description: SOS request not found.
        default:
          description: Unexpected error.

  /sos/{parentId}/request/helper:
    post:
      tags:
        - sos
      summary: 보호자가 주변 헬퍼들에게 도움 요청
      description: A guardian sends an SOS request to nearby helpers, including child info and a memo.
      operationId: requestHelperByGuardian
      parameters:
        - name: parentId
          in: path
          description: The ID of the guardian requesting helper assistance.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Details for the helper request.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelperRequest'
      responses:
        '200':
          description: Helper request successfully sent.
        '400':
          description: Invalid guardian ID or missing information.
        '404':
          description: Guardian or child not found.
        default:
          description: Unexpected error.

  /sos/{childId}/re-request:
    post:
      tags:
        - sos
      summary: 아동의 SOS 재요청
      description: A child re-requests SOS help after the initial request, subject to a time limit.
      operationId: reRequestSosByChild
      parameters:
        - name: childId
          in: path
          description: The ID of the child re-requesting help.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: SOS re-request successfully sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SosRequestResponse'
        '400':
          description: Re-request time limit not met or other request errors.
        '404':
          description: Child or previous SOS request not found.
        default:
          description: Unexpected error.

  # 비상 상황 (Emergency)
  /emergency/{childId}/start:
    post:
      tags:
        - emergency
      summary: SOS 긴급상황 시작
      description: Triggers an emergency response, including a 112 text report and SOS alert to helpers.
      operationId: triggerEmergency
      parameters:
        - name: childId
          in: path
          description: The ID of the child.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Emergency trigger successfully initiated.
        '404':
          description: Child not found.
        default:
          description: Unexpected error.

  /emergency/{childId}/end:
    post:
      tags:
        - emergency
      summary: SOS 긴급상황 종료
      description: Ends an emergency situation based on the judgment of the guardian or helper, and propagates the status.
      operationId: endEmergency
      parameters:
        - name: childId
          in: path
          description: The ID of the child.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Emergency situation successfully ended.
        '404':
          description: Child not found.
        default:
          description: Unexpected error.

  # 이동 경로 (Paths)
  /paths/{guardianId}/set:
    post:
      tags:
        - paths
      summary: A guardian sets a path for their child.
      description: Sets a start-to-end path for a child, which can be used for deviation alerts.
      operationId: setChildPath
      parameters:
        - name: guardianId
          in: path
          description: The ID of the guardian setting the path.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The path details to be set.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: Path successfully set.
        '400':
          description: Invalid path data.
        '404':
          description: Guardian or child not found.
        default:
          description: Unexpected error.

  /paths/{guardianId}/favorites:
    post:
      tags:
        - paths
      summary: A guardian adds a favorite location.
      description: Adds a frequently visited location to favorites.
      operationId: addFavoriteLocation
      parameters:
        - name: guardianId
          in: path
          description: The ID of the guardian.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The location to be added as a favorite.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: Favorite location successfully added.
        '400':
          description: Invalid location data.
        '404':
          description: Guardian not found.
        default:
          description: Unexpected error.
    get:
      tags:
        - paths
      summary: A guardian gets their favorite locations.
      description: Retrieves a list of favorite locations set by the guardian.
      operationId: getFavoriteLocations
      parameters:
        - name: guardianId
          in: path
          description: The ID of the guardian.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of favorite locations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '404':
          description: Guardian not found.
        default:
          description: Unexpected error.

  /paths/{childId}/deviation:
    get:
      tags:
        - paths
      summary: A child's path deviation is detected.
      description: An alert is sent to the guardian if the child deviates from the set path by a certain margin. This is a periodic check triggered by the backend.
      operationId: getPathDeviationAlert
      parameters:
        - name: childId
          in: path
          description: The ID of the child.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Path deviation alert successfully sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviationAlert'
        '404':
          description: Child or set path not found.
        default:
          description: Unexpected error.

  # 헬퍼 (Helper)
  /helper/{helperId}/sos-requests:
    get:
      tags:
        - helper
      summary: Get a list of SOS requests for a helper.
      description: Retrieves a list of SOS requests received by the helper.
      operationId: getHelperSosRequests
      parameters:
        - name: helperId
          in: path
          description: The ID of the helper.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of SOS requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SosRequest'
        '404':
          description: Helper not found.
        default:
          description: Unexpected error.

  /helper/sos-requests/popup:
    get:
      tags:
        - helper
      summary: Get SOS requests for the main screen popup.
      description: Retrieves SOS requests to be displayed as a popup on the main screen.
      operationId: getSosRequestsForPopup
      responses:
        '200':
          description: A list of SOS requests for the popup.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SosRequest'
        '404':
          description: No active SOS requests.
        default:
          description: Unexpected error.

  /helper/sos-requests/{requestId}/participants:
    get:
      tags:
        - helper
      summary: Get the number of participants for an SOS request.
      description: Retrieves the number of helpers participating in a specific SOS request.
      operationId: getSosParticipants
      parameters:
        - name: requestId
          in: path
          description: The ID of the SOS request.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Number of participants.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int32
        '404':
          description: SOS request not found.
        default:
          description: Unexpected error.

  /helper/sos-requests/{requestId}/accept:
    post:
      tags:
        - helper
      summary: A helper accepts an SOS request.
      description: A helper accepts an SOS request they can fulfill.
      operationId: acceptSosRequest
      parameters:
        - name: requestId
          in: path
          description: The ID of the SOS request to accept.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: SOS request successfully accepted.
        '400':
          description: SOS request is already accepted by others or invalid.
        '404':
          description: SOS request not found.
        default:
          description: Unexpected error.

  /helper/sos-requests/{requestId}/shared-locations:
    get:
      tags:
        - helper
      summary: Get shared locations of participating helpers.
      description: Retrieves the locations of all helpers participating in the same SOS request.
      operationId: getSharedHelperLocations
      parameters:
        - name: requestId
          in: path
          description: The ID of the SOS request.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of shared helper locations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '404':
          description: SOS request not found.
        default:
          description: Unexpected error.

  /helper/sos-requests/{requestId}/child-info:
    get:
      tags:
        - helper
      summary: Get child information for an accepted SOS request.
      description: Retrieves detailed information about the child after accepting the SOS request.
      operationId: getChildInfoForSos
      parameters:
        - name: requestId
          in: path
          description: The ID of the SOS request.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detailed child information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildInfo'
        '404':
          description: SOS request not found or not accepted by the helper.
        default:
          description: Unexpected error.

  /helper/{helperId}/adult-verification:
    post:
      tags:
        - helper
      summary: Verify an adult for the helper role.
      description: Verifies the user as an adult to grant them the helper role.
      operationId: verifyAdultForHelper
      parameters:
        - name: helperId
          in: path
          description: The ID of the helper to verify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Adult verification details (e.g., ID card info).
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdultVerificationRequest'
      responses:
        '200':
          description: Adult verification successfully initiated.
        '400':
          description: Invalid verification details.
        '404':
          description: Helper not found.
        default:
          description: Unexpected error.

  /helper/{helperId}/child-found:
    post:
      tags:
        - helper
      summary: A helper reports a child has been found.
      description: Notifies the guardian that the child has been found.
      operationId: notifyChildFound
      parameters:
        - name: helperId
          in: path
          description: The ID of the helper who found the child.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The SOS request ID and child info.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestId:
                  type: integer
                  format: int64
                childId:
                  type: integer
                  format: int64
      responses:
        '200':
          description: Guardian successfully notified.
        '400':
          description: Invalid request ID or child ID.
        '404':
          description: Helper or SOS request not found.
        default:
          description: Unexpected error.

  /helper/{helperId}/status:
    put:
      tags:
        - helper
      summary: Activate or deactivate the helper role.
      description: Sets the helper status to active or inactive.
      operationId: setHelperStatus
      parameters:
        - name: helperId
          in: path
          description: The ID of the helper.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The new status of the helper.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive:
                  type: boolean
      responses:
        '200':
          description: Helper status successfully updated.
        '404':
          description: Helper not found.
        default:
          description: Unexpected error.

  /helper/sos-requests/{requestId}/leave:
    post:
      tags:
        - helper
      summary: A helper leaves an SOS request.
      description: A helper stops participating in an SOS request.
      operationId: leaveSosRequest
      parameters:
        - name: requestId
          in: path
          description: The ID of the SOS request to leave.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Helper ID to be removed.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                helperId:
                  type: integer
                  format: int64
      responses:
        '200':
          description: Helper successfully removed from the request.
        '404':
          description: SOS request or helper not found.
        default:
          description: Unexpected error.

  /helper/sos-requests/{requestId}/rejoin:
    post:
      tags:
        - helper
      summary: A helper rejoins an SOS request.
      description: A helper who previously left an SOS request can rejoin.
      operationId: rejoinSosRequest
      parameters:
        - name: requestId
          in: path
          description: The ID of the SOS request to rejoin.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Helper ID to rejoin.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                helperId:
                  type: integer
                  format: int64
      responses:
        '200':
          description: Helper successfully rejoined the request.
        '400':
          description: Helper is already in the request.
        '404':
          description: SOS request or helper not found.
        default:
          description: Unexpected error.

  /helper/{helperId}/nickname:
    put:
      tags:
        - helper
      summary: A helper sets their nickname.
      description: Sets a nickname for a helper to distinguish them from others in an SOS request.
      operationId: setHelperNickname
      parameters:
        - name: helperId
          in: path
          description: The ID of the helper.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The new nickname.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
      responses:
        '200':
          description: Nickname successfully updated.
        '400':
          description: Invalid nickname provided.
        '404':
          description: Helper not found.
        default:
          description: Unexpected error.

components:
  schemas:
    CCTVInfo:
      type: object
      properties:
        cctvId:
          type: integer
          format: int64
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        streamUrl:
          type: string
          description: URL to the real-time video stream.

    TrafficInfo:
      type: object
      properties:
        message:
          type: string
          description: General traffic safety information.
        incident:
          type: array
          items:
            type: string
          description: A list of recent traffic incidents.

    ConstructionInfo:
      type: object
      properties:
        constructionId:
          type: integer
          format: int64
        siteName:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        status:
          type: string
          description: Current status of the construction.

    Location:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
      description: Geographic coordinates and timestamp.

    DeviceStatus:
      type: object
      properties:
        batteryLevel:
          type: number
          format: float
          description: Battery level in percentage.
        isCharging:
          type: boolean
        networkStatus:
          type: string
          description: Current network status (e.g., WiFi, 5G, LTE).

    SosRequestResponse:
      type: object
      properties:
        sosRequestId:
          type: integer
          format: int64
          description: The ID of the created SOS request.
        message:
          type: string
          description: A confirmation message for the SOS request.

    HelperRequest:
      type: object
      properties:
        sosRequestId:
          type: integer
          format: int64
          description: The ID of the SOS request being handled.
        childId:
          type: integer
          format: int64
          description: The ID of the child in distress.
        memo:
          type: string
          description: An optional memo or additional information for the helpers.
          example: "Child is near the park entrance, wearing a red jacket."

    Schedule:
      type: object
      properties:
        childId:
          type: integer
          format: int64
        startPlace:
          type: string
        startLocation:
          $ref: '#/components/schemas/Location'
        endPlace:
          type: string
        endLocation:
          $ref: '#/components/schemas/Location'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        days:
          type: string
          description: Days of the week (e.g., Mon,Tue,Wed).

    DeviationAlert:
      type: object
      properties:
        deviationId:
          type: integer
          format: int64
        childId:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        deviationLocation:
          $ref: '#/components/schemas/Location'

    SosRequest:
      type: object
      properties:
        sosRequestId:
          type: integer
          format: int64
        childId:
          type: integer
          format: int64
        status:
          type: string
          description: The status of the SOS request (e.g., active, accepted, canceled).
        timestamp:
          type: string
          format: date-time

    ChildInfo:
      type: object
      properties:
        childId:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
        physicalDescription:
          type: string
          description: Description of the child's appearance.
        lastKnownLocation:
          $ref: '#/components/schemas/Location'

    AdultVerificationRequest:
      type: object
      properties:
        idCardType:
          type: string
          description: Type of ID card (e.g., resident registration card, driver's license).
        idCardNumber:
          type: string
          description: ID card number for verification.

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
openapi: 3.0.0
info:
  title: Swagger SafeKids - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3

tags:
  - name: user management
    description: 사용자 계정 관련 작업
  - name: safety
    description: Everything about your Pets
  - name: sos
    description: Access to Petstore orders
  - name: user
    description: Operations about user
  - name: paths
    description: Access to Petstore orders

paths:
  /users/signup/email:
    post:
      tags:
        - user management
      summary: 이메일 중복 확인 후 회원가입
      operationId: 이메일_중복_확인_후_회원가입
      responses:
        '200':
          description: 성공적으로 처리되었습니다.
        '400':
          description: 잘못된 요청입니다.
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /users/verify/phone:
    post:
      tags:
        - user management
      summary: 휴대폰 인증 요청 및 확인
      operationId: 휴대폰_인증_요청_및_확인
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/signup/social/{provider}:
    post:
      tags:
        - user management
      summary: 소셜 회원가입 처리
      operationId: 소셜_회원가입_처리
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /auth/login/email:
    post:
      tags:
        - user management
      summary: 일반 이메일 로그인
      operationId: 일반_이메일_로그인
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /auth/login/social/{provider}:
    post:
      tags:
        - user management
      summary: 소셜 로그인 처리
      operationId: 소셜_로그인_처리
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/find-id:
    post:
      tags:
        - user management
      summary: 아이디 찾기
      operationId: 아이디_찾기
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/reset-password/request:
    post:
      tags:
        - user management
      summary: 비밀번호 재설정 요청
      operationId: 비밀번호_재설정_요청
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/reset-password/confirm:
    post:
      tags:
        - user management
      summary: 비밀번호 재설정 완료
      operationId: 비밀번호_재설정_완료
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}:
    delete:
      tags:
        - user management
      summary: 회원 탈퇴 처리
      operationId: 회원_탈퇴_처리
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /auth/logout:
    post:
      tags:
        - user management
      summary: 로그아웃
      operationId: 로그아웃
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}/profile:
    put:
      tags:
        - user management
      summary: 회원정보 수정
      operationId: 회원정보_수정
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}/residences:
    post:
      tags:
        - user management
      summary: 주거지 등록
      operationId: 주거지_등록
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{parentId}/wards:
    post:
      tags:
        - user management
      summary: 피보호자 등록 및 연동
      operationId: 피보호자_등록_및_연동
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }
  /users/{userId}/link-code:
    post:
      tags:
        - user management
      summary: 보호자-피보호자 연동 코드 생성
      operationId: 연동_코드_생성
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }

  /users/{userId}/linked-roles:
    get:
      tags:
        - user management
      summary: 연동된 보호자/피보호자 역할 조회
      operationId: 연동_역할_조회
      responses:
        '200': { description: 성공적으로 처리되었습니다. }
        '400': { description: 잘못된 요청입니다. }
        '401': { description: 인증 실패 }
        '500': { description: 서버 오류 }
  /sos:
    put:
      tags:
        - sos
      summary: Update an existing pet.
      description: Update an existing pet by Id.
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - sos
      summary: Add a new pet to the store.
      description: Add a new pet to the store.
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID.
      description: Returns a single pet.
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: [ ]
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data.
      description: Updates a pet resource based on the form data.
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet.
      description: Delete a pet.
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet deleted
        '400':
          description: Invalid pet value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: Uploads an image.
      description: Upload image of the pet.
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: No file uploaded
        '404':
          description: Pet not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status.
      description: Returns a map of status codes to quantities.
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: [ ]
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet.
      description: Place a new order in the store.
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID.
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header